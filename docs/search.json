[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ben Raymond. Author, maintainer. Adrien Ickowicz. Author. openvolley.org. Originator.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Raymond B, Ickowicz (2024). ovideo: Volleyball Video Utilities. R package version 1.0.0, https://github.com/openvolley/ovideo.","code":"@Manual{,   title = {ovideo: Volleyball Video Utilities},   author = {Ben Raymond and Adrien Ickowicz},   year = {2024},   note = {R package version 1.0.0},   url = {https://github.com/openvolley/ovideo}, }"},{"path":[]},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Volleyball Video Utilities","text":"","code":"install.packages(\"ovideo\", repos = c(\"https://openvolley.r-universe.dev\",                                     \"https://cloud.r-project.org\"))  ## or  ## install.packages(\"remotes\") ## if needed remotes::install_github(\"openvolley/ovideo\")"},{"path":"/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example usage","title":"Volleyball Video Utilities","text":"Create standalone HTML file plays video playlist. Start loading scout file, bundled ovdata package. need make sure video metadata element points somewhere meaningful. can either use local video file source: use local video file, can’t share resulting HTML file anyone else. Instead can use online video URL, case YouTube: now rest process: see something like:","code":"library(ovdata) ## install via install.packages(\"ovdata\", repos = c(\"https://openvolley.r-universe.dev\", \"https://cloud.r-project.org\")) library(ovideo) x <- ovdata_example(\"190301_kats_beds-clip\", as = \"parsed\") dv_meta_video(x) <- ovdata_example_video(\"190301_kats_beds\") dv_meta_video(x) <- \"https://youtu.be/4YH89aSlc6M\" ## extract the plays px <- datavolley::plays(x) ## it's a single rally, so we'll use all rows (just exclude NA skill rows) px <- px[!is.na(px$skill), ]  ## define columns to show in the table extra_cols <- c(\"home_team\", \"visiting_team\", \"video_time\", \"code\", \"set_number\",                 \"home_team_score\", \"visiting_team_score\")  ## make the playlist with extra columns included ply <- ov_video_playlist(px, x$meta, extra_cols = c(extra_cols, \"player_name\"))  ## use player name as the subtitle ply$subtitle <- ply$player_name  ## convert to HTML f <- ov_playlist_to_html(ply, table_cols = extra_cols)  ## and finally open it! browseURL(f)"},{"path":"/reference/browseFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Browse a system file in the default browser — browseFile","title":"Browse a system file in the default browser — browseFile","text":"RStudio overrides default behaviour browseURL platforms, meaning local files opened file:///... URLs http://localhost.... can break local HTML files expecting served file:/// URLs.","code":""},{"path":"/reference/browseFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Browse a system file in the default browser — browseFile","text":"","code":"browseFile(url, browser = getOption(\"browser\"), encodeIfNeeded = FALSE)"},{"path":"/reference/browseFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Browse a system file in the default browser — browseFile","text":"url string: utils::browseURL() browser string: utils::browseURL() encodeIfNeeded logical: utils::browseURL()","code":""},{"path":"/reference/browseFile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Browse a system file in the default browser — browseFile","text":"","code":"myfile <- tempfile(fileext = \".html\") cat(\"<h1>Hello!<\/h1>\", file = myfile)  ## in RStudio on Linux, this will be opened as a http://localhost URL if (interactive()) browseURL(myfile)  ## but this shouldn't browseFile(myfile)"},{"path":"/reference/dv_meta_video.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the video metadata in a datavolley object — dv_meta_video","title":"Get or set the video metadata in a datavolley object — dv_meta_video","text":"Get set video metadata datavolley object","code":""},{"path":"/reference/dv_meta_video.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the video metadata in a datavolley object — dv_meta_video","text":"","code":"dv_meta_video(x)  dv_meta_video(x) <- value"},{"path":"/reference/dv_meta_video.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the video metadata in a datavolley object — dv_meta_video","text":"x datavolley: datavolley object returned datavolley::dv_read() value string data.frame: string containing path video file, data.frame columns \"camera\" \"file\"","code":""},{"path":"/reference/dv_meta_video.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the video metadata in a datavolley object — dv_meta_video","text":"dv_meta_video, existing video metadata. dv_meta_video<-, video metadata value x changed","code":""},{"path":"/reference/dv_meta_video.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the video metadata in a datavolley object — dv_meta_video","text":"","code":"x <- dv_read(dv_example_file()) dv_meta_video(x) ## empty dataframe #> [1] camera file   #> <0 rows> (or 0-length row.names) dv_meta_video(x) <- \"/path/to/my/videofile\" dv_meta_video(x) #>   camera                  file #> 1      0 /path/to/my/videofile"},{"path":"/reference/ov_3dpos_multicamera.html","id":null,"dir":"Reference","previous_headings":"","what":"3D position estimate from multiple 2D views — ov_3dpos_multicamera","title":"3D position estimate from multiple 2D views — ov_3dpos_multicamera","text":"3D position estimate multiple 2D views","code":""},{"path":"/reference/ov_3dpos_multicamera.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D position estimate from multiple 2D views — ov_3dpos_multicamera","text":"","code":"ov_3dpos_multicamera(uv, C, method = \"dlt\", zinit = 2)"},{"path":"/reference/ov_3dpos_multicamera.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D position estimate from multiple 2D views — ov_3dpos_multicamera","text":"uv matrix data.frame: u, v positions 2D images, one row per image (u v image x- y-coordinates, normalized range 0-1) C list: list length number rows uv. ith entry C camera matrix (returned ov_cmat_estimate()) associated image coordinates row uv. NOTE camera matrices C must return positions orientation (.e. court coordinates, oriented way) method string: either \"dlt\" (direct linear transform) \"nls\" (nonlinear least-squares). \"nls\" method finds real-world x y coordinates point uv, assuming certain value z. chooses z minimize difference real-world x, y positions zinit numeric: initial estimate height (method = \"nls\")","code":""},{"path":"/reference/ov_3dpos_multicamera.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"3D position estimate from multiple 2D views — ov_3dpos_multicamera","text":"named list components xyz (estimated 3D position) err (measure uncertainty position estimate - currently method \"nls\")","code":""},{"path":"/reference/ov_3dpos_multicamera.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"3D position estimate from multiple 2D views — ov_3dpos_multicamera","text":"general background see e.g. Ballard DH, Brown CM (1982) Computer Vision. Prentice-Hall, New Jersey","code":""},{"path":"/reference/ov_3dpos_multicamera.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3D position estimate from multiple 2D views — ov_3dpos_multicamera","text":"","code":"## two camera matrices  refpts1 <- dplyr::tribble(~image_x, ~image_y, ~court_x, ~court_y, ~z,                              0.0533,   0.0326,      3.5,      6.5,  0,                               0.974,   0.0572,      0.5,      6.5,  0,                               0.683,    0.566,      0.5,      0.5,  0,                               0.283,    0.560,      3.5,      0.5,  0,                               0.214,    0.401,      3.5,      3.5,  0,                               0.776,    0.412,      0.5,      3.5,  0,                               0.780,    0.680,      0.5,      3.5,  2.43,                               0.206,    0.670,      3.5,      3.5,  2.43)   C1 <- ov_cmat_estimate(x = refpts1[, c(\"image_x\", \"image_y\")],                         X = refpts1[, c(\"court_x\", \"court_y\", \"z\")])   refpts2 <- dplyr::tribble(~image_x, ~image_y, ~court_x, ~court_y, ~z,                               0.045,   0.0978,      0.5,      0.5,  0,                               0.963,   0.0920,      3.5,      0.5,  0,                               0.753,    0.617,      3.5,      6.5,  0,                               0.352,    0.609,      0.5,      6.5,  0,                               0.255,    0.450,      0.5,      3.5,  0,                               0.817,    0.456,      3.5,      3.5,  0,                               0.821,    0.731,      3.5,      3.5,  2.43,                               0.246,    0.720,      0.5,      3.5,  2.43)  C2 <- ov_cmat_estimate(x = refpts2[, c(\"image_x\", \"image_y\")],                         X = refpts2[, c(\"court_x\", \"court_y\", \"z\")])  # uv1 <- ov_cmat_apply(C1, matrix(xyz, ncol = 3))c(0.369, 0.775) ## object position in image 1 # uv2 <- c(0.732, 0.688) ## object position in image 2  xyz <- matrix(c(3.4, 1.4, 2.90), ncol = 3) uv1 <- ov_cmat_apply(C1, xyz) ## object position in image 1 uv2 <- ov_cmat_apply(C2, xyz) ## object position in image 2  ## if our measurements are perfect (no noise), we can reconstruct xyz exactly: ov_3dpos_multicamera(rbind(uv1, uv2), list(C1, C2), method = \"dlt\") #> $xyz #> [1] 3.4 1.4 2.9 #>  #> $err #> [1] NA #>  ov_3dpos_multicamera(rbind(uv1, uv2), list(C1, C2), method = \"nls\") #> $xyz #> [1] 3.4 1.4 2.9 #>  #> $err #> [1] 3.552714e-15 #>   ## with noise uv1 <- uv1 + rnorm(2, sd = 0.02) uv2 <- uv2 + rnorm(2, sd = 0.02) ov_3dpos_multicamera(rbind(uv1, uv2), list(C1, C2), method = \"dlt\") #> $xyz #> [1] 3.332309 1.881513 2.766114 #>  #> $err #> [1] NA #>  ov_3dpos_multicamera(rbind(uv1, uv2), list(C1, C2), method = \"nls\") #> $xyz #> [1] 3.401994 1.308813 2.943342 #>  #> $err #> [1] 0.3905847 #>"},{"path":"/reference/ov_cmat_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply the camera matrix to 3D coordinates — ov_cmat_apply","title":"Apply the camera matrix to 3D coordinates — ov_cmat_apply","text":"camera matrix characterizes mapping camera 3D real-world coordinates 2D coordinates image.","code":""},{"path":"/reference/ov_cmat_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply the camera matrix to 3D coordinates — ov_cmat_apply","text":"","code":"ov_cmat_apply(C, X)"},{"path":"/reference/ov_cmat_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply the camera matrix to 3D coordinates — ov_cmat_apply","text":"C : camera matrix returned ov_cmat_estimate(), coefficients object X matrix data.frame: Nx3 matrix 3D real-world coordinates","code":""},{"path":"/reference/ov_cmat_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply the camera matrix to 3D coordinates — ov_cmat_apply","text":"Nx2 matrix image coordinates","code":""},{"path":"/reference/ov_cmat_apply.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Apply the camera matrix to 3D coordinates — ov_cmat_apply","text":"https://en.wikipedia.org/wiki/Camera_matrix. general background see e.g. Ballard DH, Brown CM (1982) Computer Vision. Prentice-Hall, New Jersey","code":""},{"path":[]},{"path":"/reference/ov_cmat_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply the camera matrix to 3D coordinates — ov_cmat_apply","text":"","code":"## define real-world and corresponding image coordinates xX <- dplyr::tribble(~image_x, ~image_y, ~court_x, ~court_y,   ~z,                         0.054,    0.023,      0.5,      0.5,    0, ## near left baseline                         0.951,    0.025,      3.5,      0.5,    0, ## near right baseline                         0.752,    0.519,      3.5,      6.5,    0, ## far right baseline                         0.288,    0.519,      0.5,      6.5,    0, ## far left baseline                         0.199,    0.644,      0.5,      3.5, 2.43, ## left net top                         0.208,    0.349,      0.5,      3.5, 0.00, ## left net floor                         0.825,    0.644,      3.5,      3.5, 2.43, ## right net top                         0.821,    0.349,      3.5,      3.5, 0.00) ## right net floor  C <- ov_cmat_estimate(X = xX[, 3:5], x = xX[, 1:2])  ## fitted image coordinates using C ov_cmat_apply(C, X = xX[, 3:5]) #>            [,1]       [,2] #> [1,] 0.05437417 0.02263137 #> [2,] 0.95105054 0.02438193 #> [3,] 0.75249292 0.51875259 #> [4,] 0.28772625 0.51873571 #> [5,] 0.19900000 0.64414048 #> [6,] 0.20810535 0.34946240 #> [7,] 0.82500000 0.64385986 #> [8,] 0.82031638 0.34988510  ## compare to actual image positions xX[, 1:2] #> # A tibble: 8 × 2 #>   image_x image_y #>     <dbl>   <dbl> #> 1   0.054   0.023 #> 2   0.951   0.025 #> 3   0.752   0.519 #> 4   0.288   0.519 #> 5   0.199   0.644 #> 6   0.208   0.349 #> 7   0.825   0.644 #> 8   0.821   0.349"},{"path":"/reference/ov_cmat_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the camera matrix — ov_cmat_estimate","title":"Estimate the camera matrix — ov_cmat_estimate","text":"camera matrix characterizes mapping camera 3D real-world coordinates 2D coordinates image.","code":""},{"path":"/reference/ov_cmat_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the camera matrix — ov_cmat_estimate","text":"","code":"ov_cmat_estimate(X, x)"},{"path":"/reference/ov_cmat_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the camera matrix — ov_cmat_estimate","text":"X matrix data.frame: Nx3 matrix 3D real-world coordinates x matrix data.frame: Nx2 matrix image coordinates","code":""},{"path":"/reference/ov_cmat_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the camera matrix — ov_cmat_estimate","text":"list components coef (fitted transformation coefficients) rmse (root mean squared error fitted transformation)","code":""},{"path":"/reference/ov_cmat_estimate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate the camera matrix — ov_cmat_estimate","text":"https://en.wikipedia.org/wiki/Camera_matrix. general background see e.g. Ballard DH, Brown CM (1982) Computer Vision. Prentice-Hall, New Jersey","code":""},{"path":[]},{"path":"/reference/ov_cmat_estimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the camera matrix — ov_cmat_estimate","text":"","code":"## define real-world and corresponding image coordinates xX <- dplyr::tribble(~image_x, ~image_y, ~court_x, ~court_y,   ~z,                         0.054,    0.023,      0.5,      0.5,    0, ## near left baseline                         0.951,    0.025,      3.5,      0.5,    0, ## near right baseline                         0.752,    0.519,      3.5,      6.5,    0, ## far right baseline                         0.288,    0.519,      0.5,      6.5,    0, ## far left baseline                         0.199,    0.644,      0.5,      3.5, 2.43, ## left net top                         0.208,    0.349,      0.5,      3.5, 0.00, ## left net floor                         0.825,    0.644,      3.5,      3.5, 2.43, ## right net top                         0.821,    0.349,      3.5,      3.5, 0.00) ## right net floor  C <- ov_cmat_estimate(X = xX[, 3:5], x = xX[, 1:2])  ## fitted image coordinates using C ov_cmat_apply(C, X = xX[, 3:5]) #>            [,1]       [,2] #> [1,] 0.05437417 0.02263137 #> [2,] 0.95105054 0.02438193 #> [3,] 0.75249292 0.51875259 #> [4,] 0.28772625 0.51873571 #> [5,] 0.19900000 0.64414048 #> [6,] 0.20810535 0.34946240 #> [7,] 0.82500000 0.64385986 #> [8,] 0.82031638 0.34988510  ## compare to actual image positions xX[, 1:2] #> # A tibble: 8 × 2 #>   image_x image_y #>     <dbl>   <dbl> #> 1   0.054   0.023 #> 2   0.951   0.025 #> 3   0.752   0.519 #> 4   0.288   0.519 #> 5   0.199   0.644 #> 6   0.208   0.349 #> 7   0.825   0.644 #> 8   0.821   0.349"},{"path":"/reference/ov_create_video-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Playlist to video file — ov_create_video-deprecated","title":"Playlist to video file — ov_create_video-deprecated","text":"Make self-contained video file playlist","code":""},{"path":"/reference/ov_create_video-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Playlist to video file — ov_create_video-deprecated","text":"","code":"ov_create_video(playlist, filename, subtitle_column = NULL)"},{"path":"/reference/ov_create_video-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Playlist to video file — ov_create_video-deprecated","text":"playlist data.frame: playlist returned ov_video_playlist. Note local video sources supported filename string: file write . specified (NULL), file temporary directory created. filename exists, overwritten. extension filename determine output format subtitle_column string: NULL, subtitle file produced using contents column (playlist) subtitle clip. subtitle file name filename extension \".srt\"","code":""},{"path":"/reference/ov_create_video-deprecated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Playlist to video file — ov_create_video-deprecated","text":"list filenames created video subtitle files.","code":""},{"path":[]},{"path":"/reference/ov_editry_clips.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert playlist to editry clips — ov_editry_clips","title":"Convert playlist to editry clips — ov_editry_clips","text":"Note order use ov_editry_clips, editry package must installed. Install : remotes::install_github('scienceuntangled/editry') install.packages('editry', repos = c('https://openvolley.r-universe.dev', 'https://cloud.r-project.org')). editry package also requires editly (underlying node JS package: see editry::er_install_editly()).","code":""},{"path":"/reference/ov_editry_clips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert playlist to editry clips — ov_editry_clips","text":"","code":"ov_editry_clips(   playlist,   title = NULL,   title2 = NULL,   label_col,   pause = TRUE,   seamless = FALSE,   title_args = list(),   title2_args = list(),   pause_args = list(),   label_args = list() )"},{"path":"/reference/ov_editry_clips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert playlist to editry clips — ov_editry_clips","text":"playlist data.frame: playlist returned ov_video_playlist. Note local video sources supported title string: title text (first slide). Use NULL skip slide title2 string: second title text (second slide). Use NULL skip slide label_col string: name column playlist use label clip (created editry::er_layer_news_title()). Common label choices player names, scores, descriptions play shown clip pause logical: TRUE, insert editry::er_clip_pause() clip end sequence seamless logical: TRUE, combine overlapping/adjacent clips. Note label_col specified, label first clip used whole combined clip (may longer make sense, example label player name) title_args list: arguments pass editry::er_clip_title_background() creating title slide title2_args list: arguments pass editry::er_clip_title2() creating title2 slide pause_args list: arguments pass editry::er_clip_pause() creating final slide label_args list: arguments pass editry::er_layer_news_title(), used label_col provided","code":""},{"path":"/reference/ov_editry_clips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert playlist to editry clips — ov_editry_clips","text":"list editry::er_clip() objects, suitable pass editry::er_spec()","code":""},{"path":[]},{"path":"/reference/ov_editry_clips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert playlist to editry clips — ov_editry_clips","text":"","code":"if (FALSE) {   ## Example 1    ## Step 1: create our playlist    ## use data from the ovdata package   library(ovdata) ## install via remotes::install_github(\"openvolley/ovdata\") if needed   x <- ovdata_example(\"190301_kats_beds-clip\", as = \"parsed\")    ## make sure its video element points to our local copy of the corresponding video clip   dv_meta_video(x) <- ovdata_example_video(\"190301_kats_beds\")    ## extract the plays   px <- datavolley::plays(x)   ## use just the attack rows   px <- px[which(px$skill == \"Attack\"), ]    ## make a new column with player name and attack type   px$label <- paste(px$player_name, px$attack_code, \"attack\")    ## make the playlist with the new label column included   tm <- ov_video_timing(Attack = c(-3, 2)) ## tighter than normal timing   ply <- ov_video_playlist(px, x$meta, extra_cols = \"label\", timing = tm)    ## Step 2: convert to editly clip objects and compile to mp4    library(editry)   ## create the clips, one for each row of the playlist   clips <- ov_editry_clips(ply, title = \"GKS Katowice\\nvs\\nMKS Bedzin\",                                 title2 = \"Attacks\", label_col = \"label\")     ## compile to video   outfile <- tempfile(fileext = \".mp4\")   my_spec <- er_spec(out_path = outfile, clips = clips)   er_exec_wait(spec = my_spec, fast = TRUE)    ## and view the output   if (interactive()) browseURL(outfile)    ## ---    ## Example 2   ## without a playlist, make a simple clip from a known segment of video    library(editry)   library(ovdata) ## install via remotes::install_github(\"openvolley/ovdata\") if needed   my_video <- ovdata_example_video(\"190301_kats_beds\") ## path to your video file   my_logo <- \"https://github.com/openvolley/community/raw/master/docs/talks/common/ovlogo-blur.png\"    clips <- list(er_clip_video(path = my_video, cut_from = 1, cut_to = 8), ## video segment                 ## add an outro banner with logo                 er_clip(duration = 1.5, layers = list(er_layer_fill_color(),                                                       er_layer_image(path = my_logo))),                 ##  and blank finishing screen                 er_clip_pause(duration = 0.25))    outfile <- tempfile(fileext = \".mp4\")   my_spec <- er_spec(clips = clips, out_path = outfile, allow_remote_requests = TRUE)    er_exec_wait(spec = my_spec, fast = TRUE)   if (interactive()) browseURL(outfile) }"},{"path":"/reference/ov_example_video.html","id":null,"dir":"Reference","previous_headings":"","what":"Example video clips provided as part of the ovideo package — ov_example_video","title":"Example video clips provided as part of the ovideo package — ov_example_video","text":"Example video clips provided part ovideo package","code":""},{"path":"/reference/ov_example_video.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example video clips provided as part of the ovideo package — ov_example_video","text":"","code":"ov_example_video(choice = 1)"},{"path":"/reference/ov_example_video.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example video clips provided as part of the ovideo package — ov_example_video","text":"choice integer: video file return? 1 - clip match GKS Katowice MKS Bedzin 2018/19 Polish Plus Liga","code":""},{"path":"/reference/ov_example_video.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example video clips provided as part of the ovideo package — ov_example_video","text":"Path video file","code":""},{"path":"/reference/ov_ffmpeg_exe.html","id":null,"dir":"Reference","previous_headings":"","what":"ffmpeg executable functions — ov_ffmpeg_exe","title":"ffmpeg executable functions — ov_ffmpeg_exe","text":"Helper functions find ffmpeg executable. ffmpeg installed system, can installed (platforms) ov_install_ffmpeg().","code":""},{"path":"/reference/ov_ffmpeg_exe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ffmpeg executable functions — ov_ffmpeg_exe","text":"","code":"ov_ffmpeg_exe()  ov_ffmpeg_ok(do_error = FALSE)"},{"path":"/reference/ov_ffmpeg_exe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ffmpeg executable functions — ov_ffmpeg_exe","text":"do_error logical: TRUE, throw error ffmpeg executable found","code":""},{"path":"/reference/ov_ffmpeg_exe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ffmpeg executable functions — ov_ffmpeg_exe","text":"ov_ffmpeg_exe, path executable, NULL found. ov_ffmpeg_ok, logical indicating whether executable found ","code":""},{"path":[]},{"path":"/reference/ov_ffmpeg_exe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ffmpeg executable functions — ov_ffmpeg_exe","text":"","code":"ov_ffmpeg_ok() #> [1] FALSE"},{"path":"/reference/ov_find_video_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Try and locate a video file, when the path embedded in the dvw file is for another computer — ov_find_video_file","title":"Try and locate a video file, when the path embedded in the dvw file is for another computer — ov_find_video_file","text":"Try locate video file, path embedded dvw file another computer","code":""},{"path":"/reference/ov_find_video_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try and locate a video file, when the path embedded in the dvw file is for another computer — ov_find_video_file","text":"","code":"ov_find_video_file(dvw_filename, video_filename = NULL)"},{"path":"/reference/ov_find_video_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try and locate a video file, when the path embedded in the dvw file is for another computer — ov_find_video_file","text":"dvw_filename string: full path DataVolley file video_filename character: one video file paths. NULL, video file name embedded DataVolley file used","code":""},{"path":"/reference/ov_find_video_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Try and locate a video file, when the path embedded in the dvw file is for another computer — ov_find_video_file","text":"character vector, one entry per video_filename. Video files found NA .","code":""},{"path":"/reference/ov_get_court_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Define the reference points on a court image — ov_get_court_ref","title":"Define the reference points on a court image — ov_get_court_ref","text":"function used define reference points court image, used ov_transform_points(). court coordinate system used datavolley::dv_court(), datavolley::ggcourt(), related functions. Try plot(c(0, 4), c(0, 7), type = \"n\", asp = 1); datavolley::dv_court() ggplot2::ggplot() + datavolley::ggcourt() + ggplot2::theme_bw() visual depiction.","code":""},{"path":"/reference/ov_get_court_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define the reference points on a court image — ov_get_court_ref","text":"","code":"ov_get_court_ref(image_file, video_file, t = 60, type = \"corners\")"},{"path":"/reference/ov_get_court_ref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define the reference points on a court image — ov_get_court_ref","text":"image_file string: path image file (jpg) containing court image (required video_file supplied) video_file string: path video file extract court image (required image_file supplied) t numeric: time video frame use court image (required image_file supplied) type string: currently \"corners\"","code":""},{"path":"/reference/ov_get_court_ref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define the reference points on a court image — ov_get_court_ref","text":"data.frame containing reference information","code":""},{"path":[]},{"path":"/reference/ov_get_court_ref.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define the reference points on a court image — ov_get_court_ref","text":"","code":"if (interactive()) {   crt <- ov_get_court_ref(image_file = system.file(\"extdata/2019_03_01-KATS-BEDS-court.jpg\",                           package = \"ovideo\"))  }"},{"path":"/reference/ov_get_video_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a data object stored in a video file metadata tag — ov_get_video_data","title":"Retrieve a data object stored in a video file metadata tag — ov_get_video_data","text":"Retrieve data object stored video file metadata tag","code":""},{"path":"/reference/ov_get_video_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a data object stored in a video file metadata tag — ov_get_video_data","text":"","code":"ov_get_video_data(video_file, tag = \"ov_court_info\", b64 = TRUE)"},{"path":"/reference/ov_get_video_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a data object stored in a video file metadata tag — ov_get_video_data","text":"video_file string: path video file tag string: tag name use b64 logical: obj serialized base64-encoded storing?","code":""},{"path":"/reference/ov_get_video_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a data object stored in a video file metadata tag — ov_get_video_data","text":"stored information, NULL none","code":""},{"path":[]},{"path":"/reference/ov_get_video_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a data object stored in a video file metadata tag — ov_get_video_data","text":"","code":"if (FALSE) {   if (interactive()) {     ## mark the geometry of the court in the video     ref <- ov_shiny_court_ref(video_file = ov_example_video(), t = 5)      ## store it     newfile <- ov_set_video_data(ov_example_video(), obj = ref)      ## retrieve it     ov_get_video_data(newfile)   } }"},{"path":"/reference/ov_get_video_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve metadata tags from a video file — ov_get_video_meta","title":"Retrieve metadata tags from a video file — ov_get_video_meta","text":"Requires ffmpeg available system path.","code":""},{"path":"/reference/ov_get_video_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve metadata tags from a video file — ov_get_video_meta","text":"","code":"ov_get_video_meta(video_file, debug = FALSE)"},{"path":"/reference/ov_get_video_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve metadata tags from a video file — ov_get_video_meta","text":"video_file string: path video file debug logical: TRUE, echo ffmpeg output console","code":""},{"path":"/reference/ov_get_video_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve metadata tags from a video file — ov_get_video_meta","text":"named list metadata values","code":""},{"path":[]},{"path":"/reference/ov_get_video_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve metadata tags from a video file — ov_get_video_meta","text":"","code":"if (FALSE) {   newfile <- ov_set_video_meta(ov_example_video(), comment = \"A comment\")   ov_get_video_meta(newfile) }"},{"path":"/reference/ov_images_to_video.html","id":null,"dir":"Reference","previous_headings":"","what":"Encode a set of images into a video — ov_images_to_video","title":"Encode a set of images into a video — ov_images_to_video","text":"Requires ffmpeg available system path. Input files can either specified list image files, alternatively directory name image file mask. latter, images must numbered sequential order.","code":""},{"path":"/reference/ov_images_to_video.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encode a set of images into a video — ov_images_to_video","text":"","code":"ov_images_to_video(   input_dir,   image_file_mask = \"image_%06d.jpg\",   image_files,   outfile,   fps = 30,   extra = NULL,   debug = FALSE )"},{"path":"/reference/ov_images_to_video.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encode a set of images into a video — ov_images_to_video","text":"input_dir string: path input directory image_file_mask string: mask specifies image files, e.g. \"image_%06d.jpg\" images named \"image_000001.jpg\", \"image_000002.jpg\" etc image_files character: vector input image files, order appear video. Used input_dir missing outfile string: output file. missing, temporary file (extension .mp4) used fps numeric: frames per second extra : additional parameters passed ffmpeg, form c(\"param\", \"value\", \"param2\", \"value2\"). example, c(\"-vb\", \"4096k\") used control output video bitrate debug logical: TRUE, echo ffmpeg output console","code":""},{"path":"/reference/ov_images_to_video.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encode a set of images into a video — ov_images_to_video","text":"path video file","code":""},{"path":[]},{"path":"/reference/ov_install_ffmpeg.html","id":null,"dir":"Reference","previous_headings":"","what":"Install ffmpeg — ov_install_ffmpeg","title":"Install ffmpeg — ov_install_ffmpeg","text":"helper function install ffmpeg. Currently works Windows Linux platforms. ffmpeg bundle downloaded https://github.com/BtbN/FFmpeg-Builds/releases/latest (Windows) https://johnvansickle.com/ffmpeg/ (Linux) saved user appdata directory.","code":""},{"path":"/reference/ov_install_ffmpeg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install ffmpeg — ov_install_ffmpeg","text":"","code":"ov_install_ffmpeg(force = FALSE, bits, check_hash = TRUE)"},{"path":"/reference/ov_install_ffmpeg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install ffmpeg — ov_install_ffmpeg","text":"force logical: force reinstallation ffmpeg already exists bits integer: 32 64, 32- 64-bit install. missing NULL, guessed based .Machine$sizeof.pointer. Note 64-bit supported Windows check_hash logical: check hash downloaded file. Ignored windows","code":""},{"path":"/reference/ov_install_ffmpeg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install ffmpeg — ov_install_ffmpeg","text":"path installed executable","code":""},{"path":"/reference/ov_install_ffmpeg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Install ffmpeg — ov_install_ffmpeg","text":"https://github.com/BtbN/FFmpeg-Builds/releases/latest https://johnvansickle.com/ffmpeg/","code":""},{"path":"/reference/ov_install_ffmpeg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install ffmpeg — ov_install_ffmpeg","text":"","code":"if (FALSE) {   ov_install_ffmpeg() }"},{"path":"/reference/ov_merge_video_timing_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two video timing dataframes — ov_merge_video_timing_df","title":"Merge two video timing dataframes — ov_merge_video_timing_df","text":"Merge two video timing dataframes","code":""},{"path":"/reference/ov_merge_video_timing_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two video timing dataframes — ov_merge_video_timing_df","text":"","code":"ov_merge_video_timing_df(x, default = ov_video_timing_df())"},{"path":"/reference/ov_merge_video_timing_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two video timing dataframes — ov_merge_video_timing_df","text":"x data.frame: video timings use default data.frame: default timings use, anything provided x","code":""},{"path":"/reference/ov_merge_video_timing_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two video timing dataframes — ov_merge_video_timing_df","text":"data.frame","code":""},{"path":[]},{"path":"/reference/ov_merge_video_timing_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two video timing dataframes — ov_merge_video_timing_df","text":"","code":"my_timings <- data.frame(skill = \"Attack\", phase = \"Reception\", start_offset = 0) ov_merge_video_timing_df(my_timings) #> # A tibble: 11 × 4 #>    skill     phase      start_offset duration #>    <chr>     <chr>             <dbl>    <dbl> #>  1 Serve     Serve                -5        8 #>  2 Reception Reception            -2        8 #>  3 Set       Reception            -5        8 #>  4 Set       Transition           -5        8 #>  5 Attack    Reception             0        8 #>  6 Attack    Transition           -5        8 #>  7 Block     Reception            -5        8 #>  8 Block     Transition           -5        8 #>  9 Dig       Transition           -5        8 #> 10 Freeball  Reception            -5        8 #> 11 Freeball  Transition           -5        8"},{"path":"/reference/ov_overlay_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data suitable for creating a court overlay plot — ov_overlay_data","title":"Generate data suitable for creating a court overlay plot — ov_overlay_data","text":"Generate data suitable creating court overlay plot","code":""},{"path":"/reference/ov_overlay_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data suitable for creating a court overlay plot — ov_overlay_data","text":"","code":"ov_overlay_data(   zones = TRUE,   serve_zones = TRUE,   labels = FALSE,   space = \"court\",   court_ref,   crop = TRUE )"},{"path":"/reference/ov_overlay_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data suitable for creating a court overlay plot — ov_overlay_data","text":"zones logical: TRUE, show zone lines serve_zones logical: TRUE, show serve zones behind baselines labels logical: TRUE, label zones space string: \"court\", data court coordinates. \"image\", data transformed image coordinates via ov_transform_points court_ref data.frame: returned ov_get_court_ref. required space \"image\" crop logical: space \"image\", crop TRUE, data cropped c(0, 1, 0, 1) bounding box (.e. limits image, normalized coordinates)","code":""},{"path":"/reference/ov_overlay_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate data suitable for creating a court overlay plot — ov_overlay_data","text":"list data.frames","code":""},{"path":[]},{"path":"/reference/ov_overlay_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a court overlay image showing court boundary, 3m, zone, and other lines — ov_overlay_image","title":"Generate a court overlay image showing court boundary, 3m, zone, and other lines — ov_overlay_image","text":"Generate court overlay image showing court boundary, 3m, zone, lines","code":""},{"path":"/reference/ov_overlay_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a court overlay image showing court boundary, 3m, zone, and other lines — ov_overlay_image","text":"","code":"ov_overlay_image(court_ref, height, width, filename, ...)"},{"path":"/reference/ov_overlay_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a court overlay image showing court boundary, 3m, zone, and other lines — ov_overlay_image","text":"court_ref data.frame: returned ov_get_court_ref height integer: height image produce pixels width integer: width image produce pixels filename string: image filename (png). missing, file created temporary directory ... : arguments passed ov_overlay_data","code":""},{"path":"/reference/ov_overlay_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a court overlay image showing court boundary, 3m, zone, and other lines — ov_overlay_image","text":"path generated file.","code":""},{"path":"/reference/ov_playlist_as_onclick.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert playlist to 'onclick' string — ov_playlist_as_onclick","title":"Convert playlist to 'onclick' string — ov_playlist_as_onclick","text":"Convert playlist 'onclick' string","code":""},{"path":"/reference/ov_playlist_as_onclick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert playlist to 'onclick' string — ov_playlist_as_onclick","text":"","code":"ov_playlist_as_onclick(   playlist,   video_id,   normalize_paths = TRUE,   dvjs_fun = \"dvjs_set_playlist_and_play\",   seamless = TRUE,   loop = FALSE,   controller_var )"},{"path":"/reference/ov_playlist_as_onclick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert playlist to 'onclick' string — ov_playlist_as_onclick","text":"playlist data.frame: playlist returned ov_video_playlist video_id string: id HTML video element attach playlist normalize_paths logical: TRUE, apply normalizePath local file paths. e.g. expand tilde paths like \"~/path//video.mp4\" dvjs_fun string: javascript function use seamless logical: clips overlap, transition seamlessly one next? loop logical: loop endlessly playlist? controller_var string: (version 2 ) js variable name controller object assign playlist ","code":""},{"path":"/reference/ov_playlist_as_onclick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert playlist to 'onclick' string — ov_playlist_as_onclick","text":"string suitable inclusion 'onclick' tag attribute","code":""},{"path":"/reference/ov_playlist_as_onclick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert playlist to 'onclick' string — ov_playlist_as_onclick","text":"","code":"if (FALSE) {   library(shiny)    ## hand-crafted playlist for this example   playlist <- data.frame(video_src = \"NisDpPFPQwU\",                          start_time = c(624, 3373, 4320),                          duration = 8,                          type = \"youtube\")   shinyApp(       ui = fluidPage(           ov_video_js(youtube = TRUE),           ov_video_player(id = \"yt_player\", type = \"youtube\",                           style = \"height: 480px; background-color: black;\"),           tags$button(\"Go\", onclick = ov_playlist_as_onclick(playlist, \"yt_player\"))       ),       server = function(input, output) {},   )    ## or using v2, which supports multiple video elements in a page   shinyApp(       ui = fluidPage(           ov_video_js(youtube = TRUE, version = 2),           ## first player           ov_video_player(id = \"yt_player\", type = \"youtube\",                           style = \"height: 480px; background-color: black;\",                           version = 2, controller_var = \"my_dv\"),           tags$button(\"Go\", onclick = ov_playlist_as_onclick(playlist, \"yt_player\",                                                              controller_var = \"my_dv\")),           ## second player           ov_video_player(id = \"yt_player2\", type = \"youtube\",                           style = \"height: 480px; background-color: black;\",                           version = 2, controller_var = \"my_dv2\"),           tags$button(\"Go\", onclick = ov_playlist_as_onclick(playlist, \"yt_player2\",                                                              controller_var = \"my_dv2\"))       ),       server = function(input, output) {},   )  }"},{"path":"/reference/ov_playlist_to_html.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert playlist to standalone HTML file — ov_playlist_to_html","title":"Convert playlist to standalone HTML file — ov_playlist_to_html","text":"Converts playlist object HTML file can opened browser. Note playlist uses local video files, HTML file work device access files. playlist uses YouTube (external) video URLs, HTML file usable network-connected device.","code":""},{"path":"/reference/ov_playlist_to_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert playlist to standalone HTML file — ov_playlist_to_html","text":"","code":"ov_playlist_to_html(   playlist,   playlist_name = \"Playlist\",   outfile,   no_paths = FALSE,   table_cols = c(),   loop = FALSE,   ... )"},{"path":"/reference/ov_playlist_to_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert playlist to standalone HTML file — ov_playlist_to_html","text":"playlist data.frame: returned ov_video_playlist(). playlist contains one columns subtitle subtitleskill, shown subtitle information changes clip played playlist_name string: name use playlist outfile string: file name write . supplied, file created temporary directory. Note directory outfile must already exist no_paths logical: TRUE, remove paths video files (applicable local files, YouTube external URLs). no_paths TRUE, HTML file must saved directory video source file(s) table_cols character: names columns playlist show plays table HTML file. table_cols empty, contains column names present playlist, table shown loop logical: loop endlessly playlist? ... : additional arguments passed Rmd file used generate HTML. Currently : css : string additional css apply file ui_header : tag element replace default page header","code":""},{"path":"/reference/ov_playlist_to_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert playlist to standalone HTML file — ov_playlist_to_html","text":"path HTML file","code":""},{"path":[]},{"path":"/reference/ov_playlist_to_html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert playlist to standalone HTML file — ov_playlist_to_html","text":"","code":"if (FALSE) {   ## use data from the ovdata package   library(ovdata) ## install via remotes::install_github(\"openvolley/ovdata\") if needed   x <- ovdata_example(\"190301_kats_beds-clip\", as = \"parsed\")    ## make sure its video element points to our local copy of the corresponding video clip   dv_meta_video(x) <- ovdata_example_video(\"190301_kats_beds\")    ## extract the plays   px <- datavolley::plays(x)   ## it's a single rally, so we'll use all rows (just exclude NA skill rows)   px <- px[!is.na(px$skill), ]    ## define columns to show in the table   extra_cols <- c(\"home_team\", \"visiting_team\", \"video_time\", \"code\", \"set_number\",                   \"home_team_score\", \"visiting_team_score\")    ## make the playlist with extra columns included   ply <- ov_video_playlist(px, x$meta, extra_cols = c(extra_cols, \"player_name\"))    ## use player name as the subtitle   ply$subtitle <- ply$player_name    ## convert to HTML   f <- ov_playlist_to_html(ply, table_cols = extra_cols)    ## and finally open it!   browseFile(f) }"},{"path":"/reference/ov_playlist_to_video.html","id":null,"dir":"Reference","previous_headings":"","what":"Playlist to video file — ov_playlist_to_video","title":"Playlist to video file — ov_playlist_to_video","text":"Make self-contained video file playlist.","code":""},{"path":"/reference/ov_playlist_to_video.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Playlist to video file — ov_playlist_to_video","text":"","code":"ov_playlist_to_video(   playlist,   filename,   subtitle_column = NULL,   seamless = FALSE,   debug = FALSE )"},{"path":"/reference/ov_playlist_to_video.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Playlist to video file — ov_playlist_to_video","text":"playlist data.frame: playlist returned ov_video_playlist. Note local video sources supported filename string: file write . specified (NULL), file temporary directory created. filename exists, overwritten. extension filename determine output format subtitle_column string: NULL, subtitle file produced using contents column (playlist) subtitle clip. subtitle file name filename extension \".srt\" seamless logical: TRUE, combine overlapping/adjacent clips. Note subtitle_col specified, subtitle first clip used whole combined clip (may longer make sense, example subtitle player name) debug logical: TRUE, echo ffmpeg output console","code":""},{"path":"/reference/ov_playlist_to_video.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Playlist to video file — ov_playlist_to_video","text":"list filenames created video subtitle files.","code":""},{"path":"/reference/ov_playlist_to_video.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Playlist to video file — ov_playlist_to_video","text":"Requires ffmpeg available system path. Note processing clip done inside future_lapply call (future.apply package installed), can part processing done parallel setting appropriate futures plan calling function. function experimental. particular unlikely work well video formats, especially playlist comprises clips different videos different resolution/encoding/etc.","code":""},{"path":[]},{"path":"/reference/ov_playlist_to_video.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Playlist to video file — ov_playlist_to_video","text":"","code":"if (FALSE) {   my_playlist <- ov_video_playlist(..., type = \"local\")   video_file <- ov_create_video(my_playlist)   browseURL(video_file[[1]])    ## run in parallel, with the scouted codes as subtitles   library(dplyr)   library(future.apply)   plan(multisession)   ## note that the example file doesn't have a video associated with it, so   ##  this example won't actually work in practice   x <- read_dv(dv_example_file())   ## fudge the video entry   dv_meta_video(x) <- \"~/my_video.mp4\"   ## make the playlist   my_playlist <- ov_video_playlist(     x$plays %>% dplyr::filter(skill == \"Reception\") %>% slice(1:10),     meta = x$meta, extra_cols = \"code\")   ## create the video and subtitles files   video_file <- ov_create_video(my_playlist, subtitle_column = \"code\") }"},{"path":"/reference/ov_playlist_to_vlc.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert playlist to VLC m3u format — ov_playlist_to_vlc","title":"Convert playlist to VLC m3u format — ov_playlist_to_vlc","text":"Converts playlist object m3u file can opened VLC. Note works local video files (YouTube URLs) video files must present local file system order work.","code":""},{"path":"/reference/ov_playlist_to_vlc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert playlist to VLC m3u format — ov_playlist_to_vlc","text":"","code":"ov_playlist_to_vlc(playlist, outfile, no_paths = FALSE, seamless = TRUE)"},{"path":"/reference/ov_playlist_to_vlc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert playlist to VLC m3u format — ov_playlist_to_vlc","text":"playlist data.frame: returned ov_video_playlist(). playlist contains one columns subtitle subtitleskill, used subtitle information associated clip outfile string: file name write . supplied, file created temporary directory. Note directory outfile must already exist no_paths logical: TRUE, remove paths video files. m3u file must saved directory video source file(s) seamless logical: TRUE, merge adjacent items single clip","code":""},{"path":"/reference/ov_playlist_to_vlc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert playlist to VLC m3u format — ov_playlist_to_vlc","text":"path m3u file","code":""},{"path":"/reference/ov_playlist_to_vlc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert playlist to VLC m3u format — ov_playlist_to_vlc","text":"https://www.videolan.org/, https://wiki.videolan.org/M3U/","code":""},{"path":[]},{"path":"/reference/ov_set_video_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Store a data object in a video file metadata tag — ov_set_video_data","title":"Store a data object in a video file metadata tag — ov_set_video_data","text":"function stores R data object (data frame, list, etc) within metadata tag inside video file. primarily intended store video-specific information, information carried video file . default ov_court_info metadata tag used (intended store geometry playing court video, see Examples).","code":""},{"path":"/reference/ov_set_video_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store a data object in a video file metadata tag — ov_set_video_data","text":"","code":"ov_set_video_data(   video_file,   obj,   tag = \"ov_court_info\",   b64 = TRUE,   replace = FALSE,   overwrite = FALSE )"},{"path":"/reference/ov_set_video_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store a data object in a video file metadata tag — ov_set_video_data","text":"video_file string: path video file obj : data object store, typically list returned ov_shiny_court_ref(). obj serialized base64-encoded storing unless b64 = FALSE tag string: tag name use b64 logical: serialize obj base64-encode storing? replace logical: FALSE specified metadata tag already present video file, replace overwrite logical: TRUE overwrite video_file, otherwise create new file temporary directory. See ov_set_video_meta() details","code":""},{"path":"/reference/ov_set_video_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store a data object in a video file metadata tag — ov_set_video_data","text":"path video file","code":""},{"path":[]},{"path":"/reference/ov_set_video_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store a data object in a video file metadata tag — ov_set_video_data","text":"","code":"if (FALSE) {   if (interactive()) {     ## mark the geometry of the court in the video     ref <- ov_shiny_court_ref(video_file = ov_example_video(), t = 5)      ## store it     newfile <- ov_set_video_data(ov_example_video(), obj = ref)      ## retrieve it     ov_get_video_data(newfile)   } }"},{"path":"/reference/ov_set_video_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Set metadata tags in a video file — ov_set_video_meta","title":"Set metadata tags in a video file — ov_set_video_meta","text":"Requires ffmpeg available system path.","code":""},{"path":"/reference/ov_set_video_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set metadata tags in a video file — ov_set_video_meta","text":"","code":"ov_set_video_meta(   video_file,   ...,   movflags = FALSE,   overwrite = FALSE,   debug = FALSE )"},{"path":"/reference/ov_set_video_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set metadata tags in a video file — ov_set_video_meta","text":"video_file string: path video file ... : named values set movflags logical: TRUE, add \"-movflags use_metadata_tags\" command-line ffmpeg call. allows arbitrary tag names used mp4/m4v/mov video formats, note may stored manner video software read. movflags = FALSE, supported video tag names (.e. allowable names ... parameters) depend video file type overwrite logical: TRUE overwrite video_file, see Details debug logical: TRUE, echo ffmpeg output console","code":""},{"path":"/reference/ov_set_video_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set metadata tags in a video file — ov_set_video_meta","text":"path new video file, overwrite = TRUE input file, otherwise file temporary directory","code":""},{"path":"/reference/ov_set_video_meta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set metadata tags in a video file — ov_set_video_meta","text":"function creates new video file specified metadata added. always file temporary directory. overwrite = TRUE, original file deleted replaced new file. Note movflags = FALSE, supported video tag names (.e. allowable names ... parameters) depend video file type.","code":""},{"path":[]},{"path":"/reference/ov_set_video_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set metadata tags in a video file — ov_set_video_meta","text":"","code":"if (FALSE) {   newfile <- ov_set_video_meta(ov_example_video(), comment = \"A comment\")   ov_get_video_meta(newfile) }"},{"path":"/reference/ov_shiny_court_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"A shiny app to define a court reference — ov_shiny_court_ref","title":"A shiny app to define a court reference — ov_shiny_court_ref","text":"shiny app define court reference","code":""},{"path":"/reference/ov_shiny_court_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A shiny app to define a court reference — ov_shiny_court_ref","text":"","code":"ov_shiny_court_ref(   image_file,   video_file,   t = 60,   existing_ref = NULL,   launch_browser = getOption(\"shiny.launch.browser\", interactive()),   ... )"},{"path":"/reference/ov_shiny_court_ref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A shiny app to define a court reference — ov_shiny_court_ref","text":"image_file string: path image file (jpg) containing court image (required video_file supplied) video_file string: path video file extract court image (required image_file supplied) t numeric: time video frame use court image (required image_file supplied) existing_ref list: (optional) output previous call ov_shiny_court_ref(), can edited launch_browser logical: TRUE, launch app system browser ... : additional parameters (currently ignored)","code":""},{"path":"/reference/ov_shiny_court_ref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A shiny app to define a court reference — ov_shiny_court_ref","text":"list containing reference information","code":""},{"path":"/reference/ov_shiny_court_ref.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A shiny app to define a court reference — ov_shiny_court_ref","text":"","code":"if (interactive()) {   ## define a court reference from scratch   ov_shiny_court_ref(video_file = ov_example_video(), t = 5)    ## or modify an existing one   crt <- data.frame(image_x = c(0.05397063, 0.95402573, 0.75039756, 0.28921230),                     image_y = c(0.02129301, 0.02294600, 0.52049712, 0.51884413),                     court_x = c(0.5, 3.5, 3.5, 0.5),                     court_y = c(0.5, 0.5, 6.5, 6.5))   ref <- list(court_ref = crt, net_height = 2.43)   ov_shiny_court_ref(video_file = ov_example_video(), t = 5, existing_ref = ref) }"},{"path":"/reference/ov_transform_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform points from image coordinates to court coordinates or vice-versa — ov_transform_points","title":"Transform points from image coordinates to court coordinates or vice-versa — ov_transform_points","text":"court coordinate system used datavolley::dv_court(), datavolley::ggcourt(), related functions. Try plot(c(0, 4), c(0, 7), type = \"n\", asp = 1); datavolley::dv_court() ggplot2::ggplot() + datavolley::ggcourt() + ggplot2::theme_bw() visual depiction. Image coordinates returned normalized coordinates range [0, 1]. may need scale width height image, depending plotting things.","code":""},{"path":"/reference/ov_transform_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform points from image coordinates to court coordinates or vice-versa — ov_transform_points","text":"","code":"ov_transform_points(x, y, ref, direction = \"to_court\")"},{"path":"/reference/ov_transform_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform points from image coordinates to court coordinates or vice-versa — ov_transform_points","text":"x numeric: input x points. x can also two-column data.frame matrix y numeric: input y points ref data.frame: reference, returned ov_get_court_ref() ov_shiny_court_ref() direction string: either \"to_court\" (transform image coordinates court coordinates) \"to_image\" (reverse)","code":""},{"path":"/reference/ov_transform_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform points from image coordinates to court coordinates or vice-versa — ov_transform_points","text":"two-column data.frame transformed values","code":""},{"path":"/reference/ov_transform_points.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Transform points from image coordinates to court coordinates or vice-versa — ov_transform_points","text":"https://en.wikipedia.org/wiki/Camera_matrix. general background see e.g. Ballard DH, Brown CM (1982) Computer Vision. Prentice-Hall, New Jersey","code":""},{"path":[]},{"path":"/reference/ov_transform_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform points from image coordinates to court coordinates or vice-versa — ov_transform_points","text":"","code":"## the ref data for the example image crt <- data.frame(image_x = c(0.05397063, 0.95402573, 0.75039756, 0.28921230),                   image_y = c(0.02129301, 0.02294600, 0.52049712, 0.51884413),                   court_x = c(0.5, 3.5, 3.5, 0.5),                   court_y = c(0.5, 0.5, 6.5, 6.5))  ## show the image img <- jpeg::readJPEG(system.file(\"extdata/2019_03_01-KATS-BEDS-court.jpg\",                           package = \"ovideo\")) plot(c(0, 1), c(0, 1), type = \"n\", axes = FALSE, xlab = \"\", ylab = \"\",      asp = dim(img)[1]/dim(img)[2]) rasterImage(img, 0, 0, 1, 1)  ## convert the ends of the 3m lines on court to image coordinates check <- data.frame(x = c(0.5, 3.5, 0.5, 3.5),                     y = c(2.5, 2.5, 4.5, 4.5)) ix <- ov_transform_points(check, ref = crt, direction = \"to_image\")  ## and finally plot onto the image points(ix$x, ix$y, pch = 21, bg = 4)"},{"path":"/reference/ov_video_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions for controlling the video player — ov_video_control","title":"Functions for controlling the video player — ov_video_control","text":"video element controls provided function javascript-based, probably useful Shiny apps.","code":""},{"path":"/reference/ov_video_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions for controlling the video player — ov_video_control","text":"","code":"ov_video_control(what, ...)"},{"path":"/reference/ov_video_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions for controlling the video player — ov_video_control","text":"string: command, currently one : \"play\" (note requires playlist already loaded) \"stop\" \"pause\" \"prev\" \"next\" \"jog\" - move video forward backwards given number seconds (pass value ... argument) \"set_playback_rate\" - set playback rate: 1 = normal speed, 2 = double speed, etc ... : parameters used commands. version 2 video controller, ... must include controller_var = \"my_controller_var\"","code":""},{"path":"/reference/ov_video_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions for controlling the video player — ov_video_control","text":"","code":"if (FALSE) {   ov_video_control(\"jog\", -1) ## rewind 1s   ov_video_control(\"jog\", 10) ## jump forwards 10s   ov_video_control(\"set_playback_rate\", 0.5) ## play at half speed }"},{"path":"/reference/ov_video_extract_clip.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract clip from video file — ov_video_extract_clip","title":"Extract clip from video file — ov_video_extract_clip","text":"Requires ffmpeg available system path.","code":""},{"path":"/reference/ov_video_extract_clip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract clip from video file — ov_video_extract_clip","text":"","code":"ov_video_extract_clip(   video_file,   outfile,   start_time,   duration,   end_time,   extra = NULL,   debug = FALSE )"},{"path":"/reference/ov_video_extract_clip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract clip from video file — ov_video_extract_clip","text":"video_file string: path input file outfile string: path output file. missing, temporary file (extension .mp4) used start_time numeric: start time seconds duration numeric: duration seconds. missing, calculated start_time end_time end_time numeric: end time seconds. missing, calculated start_time duration extra : additional parameters passed ffmpeg, form c(\"param\", \"value\", \"param2\", \"value2\") debug logical: TRUE, echo ffmpeg output console","code":""},{"path":"/reference/ov_video_extract_clip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract clip from video file — ov_video_extract_clip","text":"path video clip file","code":""},{"path":"/reference/ov_video_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract one or more specific frames from a video file — ov_video_frame","title":"Extract one or more specific frames from a video file — ov_video_frame","text":"Extract one specific frames video file","code":""},{"path":"/reference/ov_video_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract one or more specific frames from a video file — ov_video_frame","text":"","code":"ov_video_frame(   video_file,   t,   n,   format = \"jpg\",   debug = FALSE,   framerate,   method = \"auto\" )"},{"path":"/reference/ov_video_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract one or more specific frames from a video file — ov_video_frame","text":"video_file string: path video file t numeric: times frames extract (seconds) n integer: frame numbers frames extract. Ignored t provided. Frame numbering 1-based (first frame t = 0 frame n = 1) format string: \"jpg\" \"png\" debug logical: TRUE, echo ffmpeg output console framerate numeric: framerate video. supplied, found using [av::av_video_info] method string: method use, either \"ffmpeg\", \"av\", \"auto\". \"ffmpeg\" faster \"av\" requires ffmpeg available system path. method \"auto\", \"ffmpeg\" used available \"av\" ","code":""},{"path":"/reference/ov_video_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract one or more specific frames from a video file — ov_video_frame","text":"paths frame image files","code":""},{"path":[]},{"path":"/reference/ov_video_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract one or more specific frames from a video file — ov_video_frame","text":"","code":"video_file <- ov_example_video(1) img <- ov_video_frame(video_file, t = 5) img <- ov_video_frame(video_file, n = 150)"},{"path":"/reference/ov_video_frames.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract multiple consecutive frames from a video file — ov_video_frames","title":"Extract multiple consecutive frames from a video file — ov_video_frames","text":"Requires ffmpeg available system path.","code":""},{"path":"/reference/ov_video_frames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract multiple consecutive frames from a video file — ov_video_frames","text":"","code":"ov_video_frames(   video_file,   start_time,   duration,   end_time,   outdir,   fps,   format = \"jpg\",   jpg_quality = 1,   extra = NULL,   debug = FALSE,   exec_fun )"},{"path":"/reference/ov_video_frames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract multiple consecutive frames from a video file — ov_video_frames","text":"video_file string: path video file start_time numeric: start time seconds duration numeric: duration seconds. missing, calculated start_time end_time end_time numeric: end time seconds. missing, calculated start_time duration outdir string: path output directory, must exist. missing, temporary directory used fps numeric: frames per second, default extract frames format string: \"jpg\" \"png\" jpg_quality numeric: jpg quality 1-31, lower better (passed ffmpeg -qscale:v parameter) extra : additional parameters passed ffmpeg, form c(\"param\", \"value\", \"param2\", \"value2\") debug logical: TRUE, echo ffmpeg output console exec_fun string function: function (function name string) use execute ffmpeg command. Defaults sys::exec_internal(), sys::exec_wait() debug TRUE","code":""},{"path":"/reference/ov_video_frames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract multiple consecutive frames from a video file — ov_video_frames","text":"exec_fun specified, function wait ffmpeg call complete return character vector file names, one per frame. exec_fun specified, result function call returned immediately (might call background process)","code":""},{"path":[]},{"path":"/reference/ov_video_js.html","id":null,"dir":"Reference","previous_headings":"","what":"Inject javascript for an HTML video player — ov_video_js","title":"Inject javascript for an HTML video player — ov_video_js","text":"Inject javascript HTML video player","code":""},{"path":"/reference/ov_video_js.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inject javascript for an HTML video player — ov_video_js","text":"","code":"ov_video_js(youtube = FALSE, twitch = FALSE, version = 1)"},{"path":"/reference/ov_video_js.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inject javascript for an HTML video player — ov_video_js","text":"youtube logical: set TRUE include Youtube API javascript. necessary using local video files twitch logical: set TRUE include Twitch API javascript. version = 2. necessary using local video files version numeric: code version. Default = 1, experimental = 2","code":""},{"path":"/reference/ov_video_js.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inject javascript for an HTML video player — ov_video_js","text":"head tag containing script tags","code":""},{"path":[]},{"path":"/reference/ov_video_player.html","id":null,"dir":"Reference","previous_headings":"","what":"Video player tag element — ov_video_player","title":"Video player tag element — ov_video_player","text":"Video player tag element","code":""},{"path":"/reference/ov_video_player.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Video player tag element — ov_video_player","text":"","code":"ov_video_player(   id,   type,   controls = FALSE,   version = 1,   controller_var = paste0(id, \"_controller\"),   with_js = FALSE,   ... )"},{"path":"/reference/ov_video_player.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Video player tag element — ov_video_player","text":"id string: id tag type string: either \"youtube\", \"twitch\" (version = 2), \"local\" controls logical: TRUE, add \"previous\", \"next\", \"pause\", \"stop\", \"fullscreen\" buttons. controls object class shiny.tag (created htmltools::tags()) shiny.tag.list (htmltools::tagList()) controls added tag tag list appended version numeric: code version. Default = 1, sort--experimental = 2. Version 2 supports multiple players single page, well type = \"twitch\" controller_var string: (version 2 ) js variable name use controller object controls video player with_js logical: TRUE, also include supporting javascript libraries. with_js = FALSE, must make separate call ov_video_js() (e.g. Shiny ui.R function) ... : attributes player element (passed player tags$div call youtube/twitch tags$video local)","code":""},{"path":"/reference/ov_video_player.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Video player tag element — ov_video_player","text":"HTML tags. outermost element div id paste0(id, \"_container\"), player optionally buttons nested within .","code":""},{"path":"/reference/ov_video_player.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Video player tag element — ov_video_player","text":"","code":"if (FALSE) {   library(shiny)    ## hand-crafted playlist for this example   playlist <- data.frame(video_src = \"NisDpPFPQwU\",                          start_time = c(589, 1036, 1163, 2731, 4594),                          duration = 8,                          type = \"youtube\")    shinyApp(       ui = fluidPage(           ov_video_js(youtube = TRUE, version = 2),           ov_video_player(id = \"yt_player\", type = \"youtube\",                           version = 2, controller_var = \"my_dv\",                           style = \"height: 480px; background-color: black;\",                           controls = tags$button(\"Go\",                                      onclick = ov_playlist_as_onclick(playlist, \"yt_player\",                                                                       controller_var = \"my_dv\")))       ),       server = function(input, output) {},   ) }"},{"path":"/reference/ov_video_playlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Create video playlist — ov_video_playlist","title":"Create video playlist — ov_video_playlist","text":"Create video playlist","code":""},{"path":"/reference/ov_video_playlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create video playlist — ov_video_playlist","text":"","code":"ov_video_playlist(   x,   meta,   type = NULL,   timing = ov_video_timing(),   extra_cols = NULL,   normalize_paths = TRUE )"},{"path":"/reference/ov_video_playlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create video playlist — ov_video_playlist","text":"x data.frame: datavolleyplays object. Normally selected subset plays component datavolley object (.e. selected set actions want video playlist contain) meta list: either meta component datavolley object, list objects, data.frame columns \"match_id\" \"video_src\". Entries video_src paths URLs video file associated corresponding match_id type string: currently \"youtube\", \"twitch\", \"local\". type specified parameter, meta data.frame, type can provided column meta. Alternatively, meta meta component datavolley object, list objects, type assumed \"local\". Note single playlist mix types, entries must type timing list: relative timing skill type, either named list returned ov_video_timing() data.frame returned ov_video_timing_df(). See ov_video_timing() details extra_cols character: names additional columns x include returned data frame normalize_paths logical: TRUE, apply normalizePath local file paths. e.g. expand tilde paths like \"~/path//video.mp4\"","code":""},{"path":"/reference/ov_video_playlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create video playlist — ov_video_playlist","text":"data.frame columns src, start_time, duration, plus extras specified extra_cols","code":""},{"path":"/reference/ov_video_playlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create video playlist — ov_video_playlist","text":"","code":"## read data file x <- datavolley::dv_read(datavolley::dv_example_file()) ## note that this data file has no video specified, so put a dummy value in dv_meta_video(x) <- \"c:\\\\my_video.mp4\"  ## extract play-by-play data px <- datavolley::plays(x) ## and put dummy video_time values in, because those are missing too px$video_time <- sample.int(2e3, size = nrow(px))  ## find pipe (XP) attacks in transition px <- px[which(px$attack_code == \"XP\" & px$phase == \"Transition\"), ]  ## create playlist ply <- ov_video_playlist(px, x$meta, timing = ov_video_timing())  ## with custom timing ply <- ov_video_playlist(px, x$meta,   timing = ov_video_timing_df(data.frame(skill = \"Attack\", phase = \"Transition\",                               start_offset = -5, duration = 10, stringsAsFactors = FALSE)))"},{"path":"/reference/ov_video_playlist_pid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create video playlist per point_id — ov_video_playlist_pid","title":"Create video playlist per point_id — ov_video_playlist_pid","text":"Create video playlist per point_id","code":""},{"path":"/reference/ov_video_playlist_pid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create video playlist per point_id — ov_video_playlist_pid","text":"","code":"ov_video_playlist_pid(   x,   meta,   type = NULL,   extra_cols = NULL,   normalize_paths = TRUE )"},{"path":"/reference/ov_video_playlist_pid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create video playlist per point_id — ov_video_playlist_pid","text":"x data.frame: datavolleyplays object. Normally selected subset plays component datavolley object (.e. selected set actions want video playlist contain) meta list: either meta component datavolley object, list objects, data.frame columns \"match_id\" \"video_src\". Entries video_src paths URLs video file associated corresponding match_id type string: currently \"youtube\", \"twitch\", \"local\". type specified parameter, meta data.frame, type can provided column meta. Alternatively, meta meta component datavolley object, list objects, type assumed \"local\" extra_cols character: names additional columns x include returned data frame normalize_paths logical: TRUE, apply normalizePath` local file paths. e.g. expand tilde paths like \"~/path//video.mp4\"","code":""},{"path":"/reference/ov_video_playlist_pid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create video playlist per point_id — ov_video_playlist_pid","text":"data.frame columns src, start_time, duration, plus extras specified extra_cols","code":""},{"path":"/reference/ov_video_timing.html","id":null,"dir":"Reference","previous_headings":"","what":"Timing to use when creating video playlist — ov_video_timing","title":"Timing to use when creating video playlist — ov_video_timing","text":"default, skills except reception timing c(-5, 3), meaning video clip start 5 seconds recorded time event end 3 seconds recorded time. Reception timing c(-2, 6) (reception usually timestamp serve)","code":""},{"path":"/reference/ov_video_timing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Timing to use when creating video playlist — ov_video_timing","text":"","code":"ov_video_timing(...)  ov_video_timing_df(x)"},{"path":"/reference/ov_video_timing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Timing to use when creating video playlist — ov_video_timing","text":"... : named parameters override defaults. parameter two-element numeric vector x data.frame: data.frame timings override defaults, columns skill, phase, start_offset (start offset seconds, default = -5), duration (duration seconds, default = 8)","code":""},{"path":"/reference/ov_video_timing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Timing to use when creating video playlist — ov_video_timing","text":"ov_video_timing named list, names corresponding skills (\"Serve\", \"Reception\", etc). ov_video_timing_df, data.frame columns skill, phase, start_offset, duration","code":""},{"path":"/reference/ov_video_timing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Timing to use when creating video playlist — ov_video_timing","text":"ov_video_timing_df accepts returns data.frame rather named list. data.frame format also allows timings differentiated play phase (\"Reception\" vs \"Transition\").","code":""},{"path":[]},{"path":"/reference/ov_video_timing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Timing to use when creating video playlist — ov_video_timing","text":"","code":"## defaults ov_video_timing() #> $Serve #> [1] -5  3 #>  #> $Reception #> [1] -2  6 #>  #> $Set #> [1] -5  3 #>  #> $Attack #> [1] -5  3 #>  #> $Block #> [1] -5  3 #>  #> $Dig #> [1] -5  3 #>  #> $Freeball #> [1] -5  3 #>   ## with different settings for serve and reception ov_video_timing(serve = c(-2, 2), reception = c(-3, 1)) #> $Serve #> [1] -2  2 #>  #> $Reception #> [1] -3  1 #>  #> $Set #> [1] -5  3 #>  #> $Attack #> [1] -5  3 #>  #> $Block #> [1] -5  3 #>  #> $Dig #> [1] -5  3 #>  #> $Freeball #> [1] -5  3 #>   ## as data.frame ov_video_timing_df(data.frame(skill = \"Set\", phase = \"Transition\",                               start_offset = -5, duration = 10)) #>        skill      phase start_offset duration #> 1        Set Transition           -5       10 #> 2      Serve      Serve           -5        8 #> 3  Reception  Reception           -2        8 #> 4        Set  Reception           -5        8 #> 5     Attack  Reception           -5        8 #> 6     Attack Transition           -5        8 #> 7      Block  Reception           -5        8 #> 8      Block Transition           -5        8 #> 9        Dig Transition           -5        8 #> 10  Freeball  Reception           -5        8 #> 11  Freeball Transition           -5        8"},{"path":"/reference/ovideo-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions in package ovideo. — ov_create_video","title":"Deprecated functions in package ovideo. — ov_create_video","text":"functions listed deprecated defunct near future. possible, alternative functions similar functionality also mentioned. Help pages deprecated functions available help(\"-deprecated\").","code":""},{"path":"/reference/ovideo-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions in package ovideo. — ov_create_video","text":"","code":"ov_create_video(playlist, filename, subtitle_column = NULL)"},{"path":"/reference/ovideo-deprecated.html","id":"ov-create-video","dir":"Reference","previous_headings":"","what":"ov_create_video","title":"Deprecated functions in package ovideo. — ov_create_video","text":"ov_create_video, use ov_playlist_to_video.","code":""},{"path":"/reference/ovideo.html","id":null,"dir":"Reference","previous_headings":"","what":"ovideo — ovideo","title":"ovideo — ovideo","text":"Playlists video support functions volleyball match files.","code":""},{"path":[]},{"path":"/reference/ovideo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ovideo — ovideo","text":"Maintainer: Ben Raymond ben@untan.gl Authors: Adrien Ickowicz contributors: openvolley.org [originator]","code":""},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. datavolley dv_example_file, read_dv","code":""}]
