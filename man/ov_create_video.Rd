% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convert.R
\name{ov_create_video}
\alias{ov_create_video}
\title{Make a self-contained video file from a playlist}
\usage{
ov_create_video(playlist, filename, subtitle_column = NULL)
}
\arguments{
\item{playlist}{data.frame: a playlist as returned by \code{ov_video_playlist}. Note that only local video sources are supported}

\item{filename}{string: file to write to. If not specified (or \code{NULL}), a file in the temporary directory will be created. If \code{filename} exists, it will be overwritten. The extension of \code{filename} will determine the output format}

\item{subtitle_column}{string: if not \code{NULL}, a subtitle file will be produced using the contents of this column (in the playlist) as the subtitle for each clip. The subtitle file will have the same name as \code{filename} but with extension ".srt"}
}
\value{
A list with the filenames of the created video and subtitle files.
}
\description{
Requires that ffmpeg be available on the system path. Note that the processing of each clip is done inside of a \code{future_lapply} call, and so you can have this part of the processing done in parallel by setting an appropriate futures plan before calling this function.
}
\details{
This function is experimental. In particular it is unlikely to work well with all video formats, and especially if the playlist comprises clips from different videos with different resolution/encoding/etc.
}
\examples{
\dontrun{
  my_playlist <- ov_video_playlist(..., type = "local")
  video_file <- ov_create_video(my_playlist)
  browseURL(video_file[[1]])

  ## run in parallel, with the scouted codes as subtitles
  library(dplyr)
  library(future.apply)
  plan(multisession)
  ## note that the example file doesn't have a video associated with it, so
  ##  this example won't actually work in practice
  x <- read_dv(dv_example_file())
  ## fudge the video entry
  x$meta$video <- tibble(camera = "Camera0", file = "~/my_video.mp4")
  ## make the playlist
  my_playlist <- ov_video_playlist(
    x$plays \%>\% dplyr::filter(skill == "Reception") \%>\% slice(1:10),
    meta = x$meta, extra_cols = "code")
  ## create the video and subtitles files
  video_file <- ov_create_video(my_playlist, subtitle_column = "code")
}

}
\seealso{
\code{\link{ov_video_playlist}}
}
