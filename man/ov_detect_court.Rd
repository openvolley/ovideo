% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/automated_homography_algorithm.R
\name{ov_detect_court}
\alias{ov_detect_court}
\title{Detect court on an image}
\usage{
ov_detect_court(
  image_file,
  video_file,
  t = 60,
  view.list = NULL,
  method = "Hough",
  score_distance = "colour-based",
  line_colour = "white",
  court_colour = "#c17257",
  colour.distance = "cie2000",
  n.alpha = 50,
  lambda = 100
)
}
\arguments{
\item{image_file}{string: path to an image file (jpg) containing the court image (not required if \code{video_file} is supplied)}

\item{video_file}{string: path to a video file from which to extract the court image (not required if \code{image_file} is supplied)}

\item{t}{numeric: the time of the video frame to use as the court image (not required if \code{image_file} is supplied)}

\item{view.list}{vector: vector of court view}

\item{method}{string: either "LSD" or "Hough". See Details}

\item{score_distance}{string: Default to "colour-based". Calculate the likelihood of a homography based on the colour of the estimated lines locations}

\item{line_colour}{string: colour of the lines for the courts. Default to "white"}

\item{court_colour}{string: colour of the court. Default to "#c17257" (the orange-ish colour typical of synthetic-floor indoor courts)}

\item{colour.distance}{string:}

\item{n.alpha}{numeric:}

\item{lambda}{numeric:}
}
\value{
A list of all possible homographies, with a score
}
\description{
Detect court on an image
}
\examples{
if (interactive()) {
  library(magick)

  ## Example 1
  image_file <- system.file("extdata/2019_03_01-KATS-BEDS-court.jpg", package = "ovideo")
  court_df <- ov_detect_court(image_file = image_file, score_distance = "pattern-based", lambda = 1e3)
  ov_detect_court_plot(court_df, index = 1:4)
  ov_plot_patterns(court_df, index = 1)
  
  ## Example 2 - with players
  image_file <- system.file("extdata/2019_03_01-KATS-BEDS-frame.png", package = "ovideo")
  court_df <- ov_detect_court(image_file = image_file, score_distance = "pattern-based", lambda = 1e3)
  ov_detect_court_plot(court_df, index = 1:4, plot.all.endpoints = TRUE)
  ov_plot_patterns(court_df, index = 1)
  
  ## Example 3 - Net issue
  image_file <- system.file("extdata/2022_10_22M_CH_TE.png", package = "ovideo")
  court_df <- ov_detect_court(image_file = image_file, score_distance = "pattern-based", lambda = 1e3)
  ov_detect_court_plot(court_df, index = 1:9, plot.all.endpoints = TRUE)
 ov_plot_patterns(court_df, index = 1)
 
  ## Example 4 - Partial view and different court colour
  image_file <- system.file("extdata/2022_10_30M_TE_MV.png", package = "ovideo")
  court_df <- ov_detect_court(image_file = image_file, line_colour = "black", 
  court_colour = "#858582", score_distance = "pattern-based", lambda = 1e5)
  ov_detect_court_plot(court_df, index = 1:4, plot.all.endpoints = TRUE)
}

}
\seealso{
\code{\link[=ov_transform_points]{ov_transform_points()}}, \code{\link[datavolley:dv_court]{datavolley::dv_court()}},  \code{\link[datavolley:ggcourt]{datavolley::ggcourt()}}
}
