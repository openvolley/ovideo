% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/playlists.R
\name{ov_video_playlist}
\alias{ov_video_playlist}
\title{Create video playlist}
\usage{
ov_video_playlist(
  x,
  meta,
  type = NULL,
  timing = ov_video_timing(),
  extra_cols = NULL,
  normalize_paths = TRUE
)
}
\arguments{
\item{x}{data.frame: a datavolleyplays object. Normally this will be a selected subset of the \code{plays} component of a datavolley object (i.e. a selected set of actions that you want the video playlist to contain)}

\item{meta}{list: either the \code{meta} component of a datavolley object, or a list of such objects, or a data.frame with the columns "match_id" and "video_src". Entries in \code{video_src} should be paths or URLs to the video file associated with the corresponding \code{match_id}}

\item{type}{string: currently "youtube", "twitch", or "local". If \code{type} is not specified as a parameter, and \code{meta} is a data.frame, then \code{type} can be provided as a column in \code{meta}. Alternatively, if \code{meta} is a \code{meta} component of a datavolley object, or a list of such objects, then \code{type} will be assumed to be "local". Note that a single playlist can't mix types, all entries must be of the same type}

\item{timing}{list: the relative timing for each skill type, either a named list as returned by \code{\link[=ov_video_timing]{ov_video_timing()}} or a data.frame as returned by \code{\link[=ov_video_timing_df]{ov_video_timing_df()}}. See \code{\link[=ov_video_timing]{ov_video_timing()}} for further details}

\item{extra_cols}{character: names of additional columns from \code{x} to include in the returned data frame}

\item{normalize_paths}{logical: if \code{TRUE}, apply \code{normalizePath} to local file paths. This will e.g. expand the tilde in paths like "~/path/to/video.mp4"}
}
\value{
A data.frame with columns \code{src}, \code{start_time}, \code{duration}, plus any extras specified in \code{extra_cols}
}
\description{
Create video playlist
}
\examples{
## read data file
x <- datavolley::dv_read(datavolley::dv_example_file())
## note that this data file has no video specified, so put a dummy value in
dv_meta_video(x) <- "c:\\\\my_video.mp4"

## extract play-by-play data
px <- datavolley::plays(x)
## and put dummy video_time values in, because those are missing too
px$video_time <- sample.int(2e3, size = nrow(px))

## find pipe (XP) attacks in transition
px <- px[which(px$attack_code == "XP" & px$phase == "Transition"), ]

## create playlist
ply <- ov_video_playlist(px, x$meta, timing = ov_video_timing())

## with custom timing
ply <- ov_video_playlist(px, x$meta,
  timing = ov_video_timing_df(data.frame(skill = "Attack", phase = "Transition",
                              start_offset = -5, duration = 10, stringsAsFactors = FALSE)))

}
